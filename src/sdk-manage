#!/bin/bash

# This is a helper script for the Mer SDK to manage sb2 target and
# toolchain installation


usage()
{
    cat <<EOF
    usage (keep the arguments order): 

           $0 --toolchain --list
           $0 --toolchain --install <arch>
           $0 --toolchain --remove <arch>

           $0 --target --list
           $0 --target --install <name> <toolchain> <url>
           $0 --target --remove  <name>

           $0 --sdk --version
           $0 --sdk --upgrade

       This is the Mer SDK VM manager
       For information see https://wiki.merproject.org/wiki/Platform_SDK_on_VirtualBox
       It is primarily intended for use by the SDK web interface.


EOF
    [[ $1 == "--exit" ]] && { exit 1; }
    return 0
}

if [[ $EUID -ne 0 ]]; then
    exec sudo $0 "$@"
    echo "$0 must be run as root and sudo failed; exiting"
    exit 1
fi

# From now on, exit if variables not set
set -u

# Make sure normal users can use any dirs we make
umask 022


################################################################'
# toolchain

# Our toolchains are available through zypper as Mer-SB2-* patterns

get_toolchains() {
    zypper search -t pattern Mer-SB2-* | grep Mer-SB2 | while IFS='| ' read installed pkg dummy; do
	echo "${pkg},${installed}"
    done 
    return ${PIPESTATUS[0]}
}

ensure_installed() {
    get_toolchains | egrep -s "^$1,i$" >/dev/null
}

ensure_installable() {
    get_toolchains | egrep -s "^$1,$" >/dev/null
}

install_toolchain() {
    pkg=$1
    if ensure_installable $pkg; then
	zypper --non-interactive install -t pattern $pkg
	return $?
    else
	echo "Toolchain $pkg doesn't exist or is already installed- can not install."
	exit 2
    fi
}

remove_toolchain() {
    pkg=$1
    if ensure_installed $pkg; then
	zypper --non-interactive remove -t pattern $pkg
	return $?
    else
	echo "Toolchain $pkg is not installed - can not remove."
	exit 2
    fi
}

manage_toolchains() {
    if ! [[ $1 ]]; then
	usage --exit
    fi

    case "$1" in
	--list )
	    get_toolchains
	    return $?
	    ;;
	--install )
	    shift
	    install_toolchain "$@"
	    return $?
	    ;;
	--remove )
	    shift
	    remove_toolchain "$@"
	    return $?
	    ;;
	* )
	    echo "$1 not recognised"
	    usage --exit
	    ;;
    esac
}

################################################################
# Targets

get_targets() {
    if sudo -u mersdk sb2-config -l 2>&1 | grep 'sb2-init' >/dev/null ; then
	exit 0
    else
	sudo -u mersdk sb2-config -l
    fi
}

# Download and install a rootfs
install_target() {
    name=$1 #FIXME: check name validity
    toolchain=$2
    url=$3 #FIXME: check url validity
    echo Making sure the right toolchain exists
    if ! ensure_installed $toolchain; then
	install_toolchain $toolchain
    fi

    echo Downloading target
    echo "curl $url > /srv/mer/targets/$name.tar.bz2"
    curl "$url" > /srv/mer/targets/$name.tar.bz2
    curl_status=$?
    if [ \( $curl_status -ne 0 \) -o \( $(stat -c %s /srv/mer/targets/$name.tar.bz2) -lt 10000 \) ]; then #hash check anybody?
	echo "Download failed"
	return 3
    fi

    mkdir /fuck_hardlinks/
    if [ $? -ne 0 ]; then echo "Couldn't create /fuck_hardlinks/ directory. Delete it if it already exists, and make sure this script has right to create it."; return 6; fi
    cd /fuck_hardlinks/
    if [ $? -ne 0 ]; then echo "Couldn't enter /fuck_hardlinks/ directory. This shouldn't happen :)"; return 7; fi

    echo Decompressing target
    tar jxf /srv/mer/targets/$name.tar.bz2 
    
    if [ $? -ne 0 ]; then
	if [ "$( df --sync / | tr -s ' ' | tail -n 1 | cut -d ' ' -f 4 )" -lt 10000 ]; then
	    echo "Not enough disk space to unpack target image"
	else
	    echo "Couldn't unpack target image"
	fi
	rm -rf /fuck_hardlinks/
	return 4
    fi

    echo Relocating target
    mkdir /srv/mer/targets/$name
    if [ $? -ne 0 ]; then  rm -rf /fuck_hardlinks/; echo "Couldn't create target directory, aborting."; return 5; fi
    rsync -a /fuck_hardlinks/ /srv/mer/targets/$name/
    if [ $? -ne 0 ]; then  echo "Rsync didn't exactly run as intended, expect problems."; fi
    chown -R mersdk /srv/mer/targets/$name
    if [ $? -ne 0 ]; then  echo "Chown of target dir failed, your target may not work properly."; fi

    rm -rf /fuck_hardlinks/
    rm /srv/mer/targets/$name.tar.bz2

    cd /srv/mer/targets/$name

    transparency=""
    compiler="/usr/bin/gcc"

    if echo $toolchain | grep \\-arm; then
	architecture=$(echo $toolchain | tr '-' '\n' | tail -n 1)
	transparency="-c /usr/bin/qemu-arm-dynamic"
	compiler="/opt/cross/bin/$architecture-meego-linux-gnueabi-gcc"
    fi

    sudo -u mersdk sb2-init -L "--sysroot=/" -C "--sysroot=/" $transparency -m sdk-build -n -N -t / $name $compiler
}

remove_target() {
    name=$1
    if [ -d /home/mersdk/.scratchbox2/$name ]; then
	rm -r /home/mersdk/.scratchbox2/$name
	rm -rf /srv/mer/targets/$name/
    else
	echo "Target not installed - can't delete"
	exit 2
    fi
}


manage_targets() {
    if ! [[ $1 ]]; then
	usage --exit
    fi

    case "$1" in
	--list )
	    get_targets
	    ;;
	--install )
	    shift
	    install_target "$@"
	    ;;
	--remove )
	    shift
	    remove_target "$@"
	    ;;
	* )
	    echo "$1 not recognised"
	    usage --exit
	    ;;
    esac
}

################################################################
# SDK

get_sdk_version() {
    sdk-version
}

upgrade_sdk() {
    sdk-version --latest --go
}

manage_sdk() {
    if ! [[ $1 ]]; then
	usage --exit
    fi

    case "$1" in
	--version )
	    get_sdk_version
	    ;;
	--upgrade )
	    shift
	    upgrade_sdk "$@"
	    ;;
	* )
	    echo "$1 not recognised"
	    usage --exit
	    ;;
    esac
}


################################################################
# utility

################

################################################################
# Main

if ! [[ $1 ]]; then
    usage --exit
fi

case "$1" in
    --toolchain )
	shift
	manage_toolchains "$@"
	;;
    --target )
	shift
	manage_targets "$@"
	;;
    --sdk )
	shift
	manage_sdk "$@"
	;;
    * )
	echo "$1 not recognised"
	usage --exit
	;;
esac
